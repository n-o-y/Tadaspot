<div class="container-fluid border">
  <div class="row border">
    <div class="col col-md-9 order-md-1" id='map' style="min-height: 500px;"></div>
    <div class="border col col-md-3 order-md-0 card">
      <%= attachment_image_tag @post, :image, fallback: asset_path("no_image.png"), class:"card-img-top" %>
      <div class="card-body">
        <h5 class="card-title">
          <%= @post.name %>
        </h5>
        <div class="post-star mb-2" data-score="<%= @post.star %>"></div>
        <p class="card-text">
          <%= @post.introduction %>
        </p>
        <h6 class="card-subtitle text-muted">
          <%= l @post.created_at %>
          <%= @post.user.name %>さんが投稿
        </h6>
        <div id="like_buttons_<%=@post.id%>">
          <%= render 'likes/like', post: @post %>
        </div>
        <% if @post.user == current_user %>
          <%= link_to "編集する", edit_post_path(@post), class:"card-link" %>
          <%= link_to "削除する", post_path(@post), method: :delete, data: {confirm: "投稿を削除しますか？"}, class:"card-link" %>
        <% end %>
      </div>
    </div>
      <script>
        $('.post-star').raty({
          readOnly: true,
          score: function(){
            return $(this).attr('data-score');
          },
          starOn: "<%= asset_path('star-on.png') %>",
          starOff: "<%= asset_path('star-off.png') %>",
          starHalf: "<%= asset_path('star-half.png') %>"
        });
      </script>
    </div>
  </div>
</div>
<script>
  let map;
  let geocoder;
  let marker = [];
  let infoWindow = [];

  function initMap(){
    geocoder = new google.maps.Geocoder();
    post_LatLng = new google.maps.LatLng(
      <%= @post.latitude %>,
      <%= @post.longitude %>
    );

    map = new google.maps.Map(document.getElementById('map'),{
      center: post_LatLng,
      zoom: 14
    });

    let markerData = gon.posts;

    for (let i = 0; i < markerData.length; i++) {
      let markerLatLng = {lat: parseFloat( markerData[i]['latitude'] ), lng: parseFloat( markerData[i]['longitude'] )};
      marker[i] = new google.maps.Marker({
        map: map,
        position: markerLatLng
      });

      const postId = markerData[i]['id'];
      infoWindow[i] = new google.maps.InfoWindow({
        content: '<a href="/posts/' + postId + '">' + markerData[i]['name'] + '</a>'
      });

      markerEvent(i);

    }

    function markerEvent(i) {
      marker[i].addListener('click', function() {
        infoWindow[i].open(map, marker[i]);
      });
    }
  };
</script>
<script>
  function searchAddress(){
    let inputSearchAddress = document.getElementById('search').value;

    geocoder.geocode( { 'address': inputSearchAddress }, function(results, status) {
      if (status == 'OK') {
        map.setCenter(results[0].geometry.location);
      } else {
        alert('Geocode was not successful for the following reason: ' + status);
      }
    });
  }
</script>
<script>
  function currentLocation(){
    navigator.geolocation.getCurrentPosition(function(position) {
      LatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
      map = new google.maps.Map(document.getElementById('map'),{
        center: LatLng,
        zoom: 14
      });
      marker = new google.maps.Marker({
        map: map,
        position: LatLng
      });
    });
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV["GOOGLE_MAP_KEY"]%>&callback=initMap" async defer></script>

